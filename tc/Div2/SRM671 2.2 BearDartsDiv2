#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES

/*
ID: jamerz1
PROG: tour
LANG: C++11
*/

// C++11
#include <tuple>
#include <chrono>
#include <unordered_map>
#include <unordered_set>
#include <random>
#include <array>
#include <iterator>

// C++03
#include <assert.h>
#include <climits>
#include <cstring>
#include <algorithm>
#include <fstream>
#include <string>
#include <sstream>
#include <cmath>
#include <iomanip>
#include <stdlib.h>
#include <time.h>
#include <stack>
#include <queue>
#include <math.h>
#include <map>
#include <cstdio>
#include <ctime>
#include <list>
#include <set>
#include <stdio.h>
#include <bitset>
#include <functional> 
#include <locale>
#include <vector>
#include <streambuf>
#include <ctime>

#include <iostream>


//#define F first
//#define S second

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<ull> vull;
typedef vector<ll> vll;

// fast input
#define scan(x) do{while((x=getchar())<'0'); for(x-='0'; '0'<=(_=getchar()); x=(x<<3)+(x<<1)+_-'0');}while(0)
char _;

// TIMER
std::clock_t start;
double duration;
void start_timer() { start = std::clock(); }
void print_timer() {
	duration = (std::clock() - start) / (double)CLOCKS_PER_SEC;
	std::cout << "Duration: " << duration << '\n';
}
// END TIMER

template <class T>
T min_(T a, T b) { return (a < b ? a : b); }
template <class T>
T max_(T a, T b) { return (a > b ? a : b); }

// Mod values for the rabin-karp string matching hashing algorithm
const int RKMOD1 = 100003, RK_MOD2 = 100019;
const double PI = 3.14159265;
const int INF = INT_MAX;
const ll INFL = LLONG_MAX;
int A_MAX = 1e9;
int A_MIN = -1e9;
double EPS = 1e-10;
const int MAX_N = int(1e6)+5;


class BearDartsDiv2 {
public:
	long long count(vector <int> w) {
		if (w.size() < 4)
			return 0;
		vector<int> triple_prod_counts(MAX_N, 0);
		ll res=0;
		for (int i = 2; i < w.size(); ++i) {
			res += triple_prod_counts[w[i]];
			for (int j = i - 1; j >= 0; --j) {
				for (int k = j - 1; k >= 0; --k) {
					ll prod = ll(w[i]) * ll(w[j]) * ll(w[k]);
					if (prod < MAX_N)
						triple_prod_counts[prod]++;
				}
			}
		}
		return res;
	}
};
int main(int argc, char *argv[]) {
	start_timer();
	//std::ios::sync_with_stdio(false);
	//cin.tie(0);
	BearDartsDiv2 BD;
	cout << BD.count({ 2, 3, 4, 5, 6, 8, 12, 16, 20, 24, 40, 24, 20, 16, 12, 8, 6, 5, 4, 3, 2 }) << '\n';

	print_timer();
	return 0;
}