#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
/*
ID: jamerz1
PROG: fence9
LANG: C++11
*/

// C++11
#include <tuple>
#include <chrono>
#include <unordered_map>
#include <unordered_set>
#include <random>
#include <array>
#include <iterator>

// C++03
#include <climits>
#include <cstring>
#include <algorithm>
#include <fstream>
#include <string>
#include <sstream>
#include <cmath>
#include <iomanip>
#include <stdlib.h>
#include <time.h>
#include <stack>
#include <queue>
#include <map>
#include <cstdio>
#include <ctime>
#include <list>
#include <set>
#include <stdio.h>
#include <bitset>
#include <functional> 
#include <locale>
#include <vector>
#include <streambuf>
#include <ctime>

#include <iostream>
using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair<ull, ull> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<ull> vull;
typedef vector<ll> vll;


template <class T>
T min_(T a, T b) { return (a < b ? a : b); }
template <class T>
T max_(T a, T b) { return (a > b ? a : b); }

const int MAX_N = 1e5 + 1;

int main(int argc, char *argv[]) {
	//std::ios::sync_with_stdio(false);
	//cin.tie(0);
	ifstream fin("fence9.in");
	ofstream fout("fence9.out");

	double x1, y1, x2;
	fin >> x1 >> y1 >> x2;
	fin.close();
	double y2 = 0;

	double y_top = y1 - 1;
	int res = 0;
	double x_l, x_r;
	int x_lint, x_rint;
	double slope_l = 1;
	if (x1>0)
		slope_l = y1 / x1;
	double slope_r = 1;
	if (x1 != x2)
		slope_r = (y1 / (x1 - x2));
	while (y_top >= 1) {
		if (x1 > 0) {
			x_l = y_top / slope_l;
			if (abs(x_l - round(x_l)) < 0.0000001) {
				x_lint = round(x_l);
				x_lint++;
			}
			else
				x_lint = ceil(x_l);
		}
		else {
			x_lint = 1;
		}

		if (abs(x1 - x2) > 0.000001) {
			double c = slope_r * x2 * -1;
			x_r = (y_top - c) / slope_r;
			if (abs(x_r - round(x_r)) < 0.0000001) {
				x_rint = round(x_r);
				x_rint--;
			}
			else
				x_rint = floor(x_r);
		}
		else {
			x_rint = round(x2) - 1;
		}
		int diff = x_rint - x_lint + 1;
		if (diff > 0)
			res += diff;
		y_top--;
	}
	fout << res << '\n';
	return 0;
}

