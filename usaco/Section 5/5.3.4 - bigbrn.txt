#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES

/*
ID: jamerz1
PROG: bigbrn
LANG: C++11
*/

// C++11
#include <tuple>
#include <chrono>
#include <unordered_map>
#include <unordered_set>
#include <random>
#include <array>
#include <iterator>

// C++03
#include <assert.h>
#include <climits>
#include <cstring>
#include <algorithm>
#include <fstream>
#include <string>
#include <sstream>
#include <cmath>
#include <iomanip>
#include <stdlib.h>
#include <time.h>
#include <stack>
#include <queue>
#include <math.h>
#include <map>
#include <cstdio>
#include <ctime>
#include <list>
#include <set>
#include <stdio.h>
#include <bitset>
#include <functional> 
#include <locale>
#include <vector>
#include <streambuf>
#include <ctime>

#include <iostream>

//#define F first
//#define S second

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef vector<ull> vull;
typedef vector<ll> vll;

// fast input
#define scan(x) do{while((x=getchar())<'0'); for(x-='0'; '0'<=(_=getchar()); x=(x<<3)+(x<<1)+_-'0');}while(0)
char _;

// TIMER
std::clock_t start;
double duration;
void start_timer() {start = std::clock();}
void print_timer() {	
	duration = (std::clock() - start) / (double)CLOCKS_PER_SEC;
	std::cout << "Duration: " << duration << '\n';
}
// END TIMER

template <class T>
T min_(T a, T b) { return (a < b ? a : b); }
template <class T>
T max_(T a, T b) { return (a > b ? a : b); }

const double PI = 3.14159265;
const int INF = INT_MAX;
int A_MAX = 1e9;
int A_MIN = -1e9;
double EPS = 1e-10;
const int MAX_N = 5e5 + 5;

vector<vector<int>>DP;

int main(int argc, char *argv[]) {
	//start_timer();
	//std::ios::sync_with_stdio(false);
	//cin.tie(0);
	
	ifstream fin("bigbrn.in");
	int N, T;
	fin >> N >> T;
	DP.assign(N, vi(N, 1));
	int r, c;
	for (int i = 0; i < T; ++i) {
		fin >> r >> c;
		r--, c--; // 0-indexed DP table
		DP[r][c] = 0;
	}
	fin.close();
	int best = 1;
	for (int i = 1; i < N; ++i) {
		for (int j = 1; j < N; ++j) {
			if (DP[i][j] == 0) // tree
				continue;
			int min_neigh = min_(DP[i-1][j-1], min_(DP[i][j-1], DP[i-1][j]));
			DP[i][j] = min_neigh + 1;
			best = max(best, DP[i][j]);
		}
	}
	ofstream fout("bigbrn.out");
	fout << best << '\n';
	fout.close();
	//print_timer();
	return 0;
}