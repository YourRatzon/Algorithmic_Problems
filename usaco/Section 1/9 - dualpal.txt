#define _CRT_SECURE_NO_WARNINGS

/*
ID: jamerz1
PROG: dualpal
LANG: C++11
*/

// C++11
#include <tuple>
#include <chrono>
#include <unordered_map>
#include <unordered_set>
#include <random>
#include <array>

// C++03
#include <cstring>
#include <algorithm>
#include <fstream>
#include <string>
#include <sstream>
#include <math.h>
#include <iomanip>
#include <stdlib.h>
#include <time.h>
#include <stack>
#include <queue>
#include <map>
#include <cstdio>
#include <ctime>
#include <list>
#include <set>
#include <stdio.h>
#include <bitset>
#include <functional> 

#include <iostream>
using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;

const int MAX = 100002;
char charMap[20];
string toBase(int num, int base)
{
	string result;

	while (num > 0)
	{
		result.insert(result.begin(), num % base);
		num /= base;
	}
	return result;
}

bool isPalindrome(string str)
{
	for (int l = 0, r = str.size() - 1; l < r; ++l, --r)
	{
		if (str[l] != str[r])
			return false;
	}
	return true;
}

int main()
{
	ifstream fin("dualpal.in");
	ofstream fout("dualpal.out");

	int N, S;
	fin >> N >> S;
	int currNum = S + 1;
	int i = 0;
	while (i < N)
	{
		int count = 0;
		for (int base = 2; base <= 10; ++base)
		{
			string inBase = toBase(currNum, base);
			if (isPalindrome(inBase))
			{
				count++;
				if (count == 2)
					break;
			}
		}
		if (count == 2)
		{
			fout << currNum << '\n';
			++i;
		}
		currNum++;
	}
	return 0;
}
