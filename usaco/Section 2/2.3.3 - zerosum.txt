#define _CRT_SECURE_NO_WARNINGS

/*
ID: jamerz1
PROG: zerosum
LANG: C++11
*/

// C++11
#include <tuple>
#include <chrono>
#include <unordered_map>
#include <unordered_set>
#include <random>
#include <array>

// C++03
#include <cstring>
#include <algorithm>
#include <fstream>
#include <string>
#include <sstream>
#include <math.h>
#include <iomanip>
#include <stdlib.h>
#include <time.h>
#include <stack>
#include <queue>
#include <map>
#include <cstdio>
#include <ctime>
#include <list>
#include <set>
#include <stdio.h>
#include <bitset>
#include <functional> 
#include <locale>
#include <vector>
#include <streambuf>

#include <iostream>
using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;

const unsigned int MAX_N = 201;
const unsigned int MAX_K = 101;

ofstream fout("zerosum.out");
int N;

void solve(int i, int curr_res, string curr_seq, int last_digits) {
	if (i == N) {
		if (curr_res == 0) {
			fout << curr_seq << '\n';
		}
		
		return;
	}

	if (last_digits == curr_seq.length()/2 + 1) {//all spaces in prev states
		solve(i + 1, curr_res*10 + i + 1, curr_seq + " " + to_string(i + 1), last_digits + 1);
	}
	else {
		char sign = curr_seq[curr_seq.size() - 2 * last_digits];
		int delta = 0;
		int new_res = curr_res;
		for (int d = 0; d < last_digits; ++d) 
			delta += (i - d) * (pow(10, d));
		if (sign == '+') {
			new_res -= delta;
			new_res += delta * 10 + i + 1;
		}
		else {// sign == '-'
			new_res += delta;
			new_res -= ((delta * 10) + i + 1);
		}
		solve(i + 1, new_res, curr_seq + " " + to_string(i + 1), last_digits + 1);
	}

	solve(i + 1, curr_res + i + 1, curr_seq + "+" + to_string(i + 1), 1);
	solve(i + 1, curr_res - (i + 1), curr_seq + "-" + to_string(i + 1), 1);
}
int main()
{
	ifstream fin("zerosum.in");
	fin >> N;

	solve(1, 1, "1", 1);


	return 0;
}