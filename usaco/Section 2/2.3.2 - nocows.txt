#define _CRT_SECURE_NO_WARNINGS

/*
ID: jamerz1
PROG: nocows
LANG: C++11
*/

// C++11
#include <tuple>
#include <chrono>
#include <unordered_map>
#include <unordered_set>
#include <random>
#include <array>

// C++03
#include <cstring>
#include <algorithm>
#include <fstream>
#include <string>
#include <sstream>
#include <math.h>
#include <iomanip>
#include <stdlib.h>
#include <time.h>
#include <stack>
#include <queue>
#include <map>
#include <cstdio>
#include <ctime>
#include <list>
#include <set>
#include <stdio.h>
#include <bitset>
#include <functional> 
#include <locale>
#include <vector>
#include <streambuf>

#include <iostream>
using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;

const unsigned int MAX_N = 201;
const unsigned int MAX_K = 101;
ull T[MAX_N][MAX_K];
bool visited[MAX_N][MAX_K];

ull solve(int n, int k) {
	if (pow(2, k) - 1 == n) return 1;
	if (n < 2 * k - 1 || n > pow(2, k) - 1) return 0;
	if (k == 1 || n == 1) return 1;

	ull total = 0;
	for (int i = 0; i < MAX_N; ++i) {
		T[i][1] = 1;
		T[i][0] = 0;
		for (int j = 0; j < 101; ++j) {
			//if (pow(2, j) - 1 == i) T[i][j] = 1;
			if (i<2 * j - 1 || i>pow(2, j) - 1) T[i][j] = 0;
		}
	}
	ii binds[MAX_N];
	for (int i = 1; i <= n; i += 2) {
		binds[i].first = log(i + 1)/log(2);
		if (pow(2, binds[i].first) != i + 1)
			binds[i].first++;
		binds[i].second = (i + 1) / 2;
	}

	for (int new_n = 1; new_n <= n; new_n+=2) {
		for (int new_k = binds[new_n].first; new_k <= binds[new_n].second; ++new_k) {
			for (int new_nr = new_n-2; new_nr > 0; new_nr -= 2) {

				int new_nl = new_n - new_nr - 1;
				for (int kr = new_k - 1; kr >= binds[new_nr].first; --kr){
					if (kr > binds[new_nr].second || kr < binds[new_nr].first)
						continue;
					if (kr == new_k - 1) {
						for (int kl = binds[new_nl].first; kl <= binds[new_nl].second && kl <= kr; ++kl) {
							T[new_n][new_k] += (T[new_nl][kl] * T[new_nr][kr]) % 9901;
						}
					}
					else {
						int kl = new_k - 1;
						if (kl > binds[new_nl].second || kl < binds[new_nl].first)
							continue;
						T[new_n][new_k] += (T[new_nl][kl] * T[new_nr][kr]) % 9901;
					}
				}
			}
		}
	}
	return T[n][k] % 9901;
}

int main()
{
	memset(T, 0, 201 * 101 * 4);
	ifstream fin("nocows.in");
	int N,K;
	fin >> N >> K;
	ofstream fout("nocows.out");
	if (N % 2 == 0)
		fout << "0\n";
	else
		fout << solve(N,K) << '\n';
	fout.close();

	return 0;
}
