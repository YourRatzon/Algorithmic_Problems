// Int To Words

#include <iostream>
#include <algorithm>
#include <fstream>
#include <string>
#include <sstream>
#include <array>
#include <math.h> 
#include <queue> 
#include <random>
#include <chrono>
#include <stdlib.h>    
#include <time.h> 
#include <stack>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <cstdio>
#include <ctime>
#include <list>

using std::cout;
using std::cin;
using std::string;
using std::endl;
using std::vector;

/*
At first, we can only determine the cost of the vertices whose outdegree (number of edges leaving) are 0 assigning each a cost of 0. Using those as our "base cases" we can build the costs for the rest of the vertices out of them using the following recursive definition:

cost of vertex v = Max[ cost of each vertex reachable in one step from v + cost of connecting edge]. The return value is the maximum cost of any vertex in the graph.
*/

class Circuits
{
public:

	int howLong(vector <string> connects, vector <string> costs)
	{
		int G[51][51];
		int n = connects.size();

		for (int i = 0; i < n; ++i)
		for (int j = 0; j < n; ++j)
			G[i][j] = (i == j ? 0 : -(1<<30));


		for (int i = 0; i < n; ++i)
		{
			std::stringstream ss1(connects[i]);
			std::stringstream ss2(costs[i]);
			for (int a, b; ss1 >> a && ss2 >> b; G[i][a] = b);
		}
		int max = 0;
		for (int k = 0; k < n; ++k)
		{
			for (int i = 0; i < n; ++i)
			{
				for (int j = 0; j < n; ++j)
				{
					G[i][j] = std::max(G[i][j], G[i][k] + G[k][j]);
					max = (G[i][j] > max ? G[i][j] : max);
				}
			}
		}
		return max;
	}

};



int main(int arg, char* argv[])
{
	Circuits c;
	cout << c.howLong(
	{ "", "2 3", "3 4 5", "4 6", "5 6", "7", "5 7", "" },
	{"", "30 50", "19 6 40", "12 10", "35 23", "8", "11 20", ""}
	);
	cout << endl;


	system("pause");
	return 0;
}