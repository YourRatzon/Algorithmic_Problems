#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
/*
ID: jamerz1
PROG: stamps
LANG: C++11
*/

// C++11
#include <tuple>
#include <chrono>
#include <unordered_map>
#include <unordered_set>
#include <random>
#include <array>

// C++03
#include <climits>
#include <cstring>
#include <algorithm>
#include <fstream>
#include <string>
#include <sstream>
#include <cmath>
#include <iomanip>
#include <stdlib.h>
#include <time.h>
#include <stack>
#include <queue>
#include <map>
#include <cstdio>
#include <ctime>
#include <list>
#include <set>
#include <stdio.h>
#include <bitset>
#include <functional> 
#include <locale>
#include <vector>
#include <streambuf>
#include <ctime>

#include <iostream>
using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;

const int INF = LONG_MAX;

template <class T>
T min_(T a, T b) { return (a < b ? a : b); }
template <class T>
T max_(T a, T b) { return (a > b ? a : b); }

vi coin_types;
vector<int> min_stamps;

int main(){
	std::ios::sync_with_stdio(false);
	cin.tie(0);
	
	ifstream fin("stamps.in");
	int total_number, num_types;
	fin >> total_number >> num_types;
	coin_types.resize(num_types);
	int max_coin_val = 0;
	for (int i = 0; i < num_types; ++i) {
		fin >> coin_types[i];
		max_coin_val = max(max_coin_val, coin_types[i]);
	}
	fin.close();

	int max_val = max_coin_val * total_number;
	min_stamps.assign(max_val + 1, INF);
	min_stamps[0] = 0;
	for (int val = 1; val <= max_val; val++) {
		for (int type = 0; type < num_types; ++type) {
			if (val - coin_types[type] < 0) continue;
			else
				min_stamps[val] = min(min_stamps[val], min_stamps[val - coin_types[type]] + 1);
		}
	}
	ofstream fout("stamps.out");
	int best = 0;
	while (best <= max_val && min_stamps[best] <= total_number) best++;
	fout << best - 1 << '\n';
	return 0;
}