// Is a tree?

/*

Sample Input

6 8  5 3  5 2  6 4
5 6  0 0

8 1  7 3  6 2  8 9  7 5
7 4  7 8  7 6  0 0

3 8  6 8  6 4
5 3  5 6  5 2  0 0
-1 -1

*/

#include <iostream>
#include <algorithm>
#include <fstream>
#include <string>
#include <sstream>
#include <array>
#include <math.h> 
#include <queue> 
#include <random>
#include <chrono>
#include <stdlib.h>    
#include <time.h> 
#include <stack>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <cstdio>
#include <ctime>
#include <list>
#include <set>

using std::cout;
using std::cin;
using std::string;
using std::endl;
using std::vector;

/*
At first, we can only determine the cost of the vertices whose outdegree (number of edges leaving) are 0 assigning each a cost of 0. Using those as our "base cases" we can build the costs for the rest of the vertices out of them using the following recursive definition:

cost of vertex v = Max[ cost of each vertex reachable in one step from v + cost of connecting edge]. The return value is the maximum cost of any vertex in the graph.
*/

struct Vertex
{
	int data;
	bool visited;
	vector<int> neighbors;
	Vertex(int val) : data(val), visited(0) {}

	bool operator==(const Vertex& rhs)
	{
		return data == rhs.data;
	}
};

class Graph
{
private:
	Vertex * source;
	std::vector<Vertex *> Vertices;
	int getRoot();
	
public:
	Graph(const std::vector<Vertex*>& verts)
	{
		Vertices = verts;
		int root = getRoot();
		source = (root != -1 ? Vertices[root] : (!Vertices.empty() ? Vertices[0] : NULL));
	}

	bool isTree();

};

int Graph::getRoot()
{
	std::set<int> vertSet;

	for (Vertex * vert : Vertices)
	{
		if (vert)
		vertSet.insert(vert->data);
	}

	for (Vertex * vert : Vertices)
	{
		if (vert)
		for (int x : vert->neighbors)
			vertSet.erase(x);
	}

	std::set<int>::const_iterator it = vertSet.begin(); 
	if (vertSet.size() == 1) return *it;
	else return -1;
}

bool Graph::isTree()
{
	int root = getRoot();
	if (root == -1) return false;

	std::stack<int> st;
	st.push(root);
	Vertices[root]->visited = true;
	while (!st.empty())
	{
		int currVert = st.top();
		st.pop();
		for (int vert : Vertices[currVert]->neighbors)
		{
			if (Vertices[vert]->visited) return false;

			Vertices[vert]->visited = true;
			st.push(vert);
		}
	}
}




int main(int arg, char* argv[])
{

	int v = 0 , u = 0;
	Vertex * vert;
	std::vector<Vertex *> vertVec(200);

	std::unordered_map<int, vector<int>> GMap;

	for (int i = 1; v != -1; ++i )
	{
		while (cin >> v >> u && v != 0 && v != -1)
		{
			if (GMap.find(u) == GMap.end())
				GMap[u] = *(new vector<int>);
			GMap[v].push_back(u);
		}
		for (auto key : GMap)
		{
			Vertex * vert = new Vertex(key.first);
			for (auto neighbor : key.second)
				vert->neighbors.push_back(neighbor);
			vertVec[vert->data] = vert;
		}
		Graph g(vertVec);
		if (v == -1) break;

		cout << "Case " << i << " is " << (g.isTree() ? "" : "not ") << "a tree.\n";
		vertVec.clear();
		vertVec.resize(200);
		GMap.clear();
	}


	system("pause");
	return 0;
}