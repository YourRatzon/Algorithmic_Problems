// POJ - 1125
// Stockbroker Grapevine


#include <iostream>
#include <algorithm>
#include <fstream>
#include <string>
#include <sstream>
#include <array>
#include <math.h> 
#include <iomanip>
#include <queue> 
#include <random>
#include <chrono>
#include <stdlib.h>    
#include <time.h> 
#include <stack>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <cstdio>
#include <ctime>
#include <list>
#include <set>
#include <tuple>

using std::cout;
using std::cin;
using std::string;
using std::endl;
using std::vector;
using std::pair;
using std::make_pair;

int main()
{
	int n = 0;
	int edgeTo = 0;
	int edges = 0;
	int weight = 0;

	while (cin >> n && n != 0)
	{
		int ** D = new int *[n];
		for (int i = 0; i < n; ++i)
		{
			D[i] = new int[n];
			cin >> edges;
			for (int j = 0; j < n; ++j)
				D[i][j] = (INT_MAX - 1) / 2;

			for (int j = 0; j < edges; ++j)
			{
				cin >> edgeTo >> weight;
				D[i][edgeTo - 1] = weight;
			}
		}

		for (int k = 0; k < n; ++k)
			for (int j = 0; j < n; ++j)
			for (int i = 0; i < n; ++i)
			{
				if (i == j) continue;
				D[i][j] = std::min(D[i][j], D[i][k] + D[k][j]);
			}
		
				int minIndex = 0, maxPath = (INT_MAX - 1) / 2, currMaxPath = 0;

		for (int i = 0; i < n; ++i)
		{
			currMaxPath = 0;
			for (int j = 0; j < n; ++j)
			{
				if (i != j && D[i][j] > currMaxPath)
					currMaxPath = D[i][j];
			}
			if (currMaxPath < maxPath)
			{
				maxPath = currMaxPath;
				minIndex = i;
			}
		}

		if (maxPath == (INT_MAX - 1) / 2)
			cout << "disjoint"<< endl;
		else
			cout << minIndex + 1 << ' ' << maxPath << endl;

		for (int i = 0; i < n; ++i)
			delete [] D[i];
		delete[] D;
	}


	system("pause");
	return 0;
}
